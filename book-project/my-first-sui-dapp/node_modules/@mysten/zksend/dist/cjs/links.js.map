{
  "version": 3,
  "sources": ["../../src/links.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui.js/client';\nimport type { CoinStruct, ObjectOwner, SuiObjectChange } from '@mysten/sui.js/client';\nimport { decodeSuiPrivateKey } from '@mysten/sui.js/cryptography';\nimport type { Keypair, Signer } from '@mysten/sui.js/cryptography';\nimport { Ed25519Keypair } from '@mysten/sui.js/keypairs/ed25519';\nimport type { TransactionObjectInput } from '@mysten/sui.js/transactions';\nimport { TransactionBlock } from '@mysten/sui.js/transactions';\nimport {\n\tfromB64,\n\tnormalizeStructTag,\n\tnormalizeSuiAddress,\n\tnormalizeSuiObjectId,\n\tparseStructTag,\n\tSUI_TYPE_ARG,\n\ttoB64,\n} from '@mysten/sui.js/utils';\n\ninterface ZkSendLinkRedirect {\n\turl: string;\n\tname?: string;\n}\n\nexport interface ZkSendLinkBuilderOptions {\n\thost?: string;\n\tpath?: string;\n\tmist?: number;\n\tkeypair?: Keypair;\n\tclient?: SuiClient;\n\tsender: string;\n\tredirect?: ZkSendLinkRedirect;\n}\n\nexport interface ZkSendLinkOptions {\n\tkeypair?: Keypair;\n\tclient?: SuiClient;\n}\n\nconst DEFAULT_ZK_SEND_LINK_OPTIONS = {\n\thost: 'https://zksend.com',\n\tpath: '/claim',\n\tclient: new SuiClient({ url: getFullnodeUrl('mainnet') }),\n};\n\nconst SUI_COIN_TYPE = normalizeStructTag(SUI_TYPE_ARG);\nconst SUI_COIN_OBJECT_TYPE = normalizeStructTag('0x2::coin::Coin<0x2::sui::SUI>');\n\ninterface CreateZkSendLinkOptions {\n\ttransactionBlock?: TransactionBlock;\n\tcalculateGas?: (options: {\n\t\tbalances: Map<string, bigint>;\n\t\tobjects: TransactionObjectInput[];\n\t\tgasEstimateFromDryRun: bigint;\n\t}) => Promise<bigint> | bigint;\n}\n\nexport class ZkSendLinkBuilder {\n\t#host: string;\n\t#path: string;\n\t#keypair: Keypair;\n\t#client: SuiClient;\n\t#redirect?: ZkSendLinkRedirect;\n\t#objects = new Set<TransactionObjectInput>();\n\t#balances = new Map<string, bigint>();\n\t#sender: string;\n\n\t#coinsByType = new Map<string, CoinStruct[]>();\n\n\tconstructor({\n\t\thost = DEFAULT_ZK_SEND_LINK_OPTIONS.host,\n\t\tpath = DEFAULT_ZK_SEND_LINK_OPTIONS.path,\n\t\tkeypair = new Ed25519Keypair(),\n\t\tclient = DEFAULT_ZK_SEND_LINK_OPTIONS.client,\n\t\tsender,\n\t\tredirect,\n\t}: ZkSendLinkBuilderOptions) {\n\t\tthis.#host = host;\n\t\tthis.#path = path;\n\t\tthis.#redirect = redirect;\n\t\tthis.#keypair = keypair;\n\t\tthis.#client = client;\n\t\tthis.#sender = normalizeSuiAddress(sender);\n\t}\n\n\taddClaimableMist(amount: bigint) {\n\t\tthis.addClaimableBalance(SUI_COIN_TYPE, amount);\n\t}\n\n\taddClaimableBalance(coinType: string, amount: bigint) {\n\t\tconst normalizedType = normalizeStructTag(coinType);\n\t\tthis.#balances.set(normalizedType, (this.#balances.get(normalizedType) ?? 0n) + amount);\n\t}\n\n\taddClaimableObject(id: string) {\n\t\tthis.#objects.add(id);\n\t}\n\n\tgetLink(): string {\n\t\tconst link = new URL(this.#host);\n\t\tlink.pathname = this.#path;\n\t\tlink.hash = toB64(decodeSuiPrivateKey(this.#keypair.getSecretKey()).secretKey);\n\n\t\tif (this.#redirect) {\n\t\t\tlink.searchParams.set('redirect_url', this.#redirect.url);\n\t\t\tif (this.#redirect.name) {\n\t\t\t\tlink.searchParams.set('name', this.#redirect.name);\n\t\t\t}\n\t\t}\n\n\t\treturn link.toString();\n\t}\n\n\tasync create({\n\t\tsigner,\n\t\t...options\n\t}: CreateZkSendLinkOptions & {\n\t\tsigner: Signer;\n\t}) {\n\t\tconst txb = await this.createSendTransaction(options);\n\n\t\treturn this.#client.signAndExecuteTransactionBlock({\n\t\t\ttransactionBlock: await txb.build({ client: this.#client }),\n\t\t\tsigner,\n\t\t});\n\t}\n\tasync createSendTransaction({\n\t\ttransactionBlock: txb = new TransactionBlock(),\n\t\tcalculateGas,\n\t}: CreateZkSendLinkOptions = {}) {\n\t\tconst gasEstimateFromDryRun = await this.#estimateClaimGasFee();\n\t\tconst baseGasAmount = calculateGas\n\t\t\t? await calculateGas({\n\t\t\t\t\tbalances: this.#balances,\n\t\t\t\t\tobjects: [...this.#objects],\n\t\t\t\t\tgasEstimateFromDryRun,\n\t\t\t  })\n\t\t\t: gasEstimateFromDryRun * 2n;\n\n\t\t// Ensure that rounded gas is not less than the calculated gas\n\t\tconst gasWithBuffer = baseGasAmount + 1013n;\n\t\t// Ensure that gas amount ends in 987\n\t\tconst roundedGasAmount = gasWithBuffer - (gasWithBuffer % 1000n) - 13n;\n\n\t\tconst address = this.#keypair.toSuiAddress();\n\t\tconst objectsToTransfer = [...this.#objects].map((id) => txb.object(id));\n\t\tconst [gas] = txb.splitCoins(txb.gas, [roundedGasAmount]);\n\t\tobjectsToTransfer.push(gas);\n\n\t\ttxb.setSenderIfNotSet(this.#sender);\n\n\t\tfor (const [coinType, amount] of this.#balances) {\n\t\t\tif (coinType === SUI_COIN_TYPE) {\n\t\t\t\tconst [sui] = txb.splitCoins(txb.gas, [amount]);\n\t\t\t\tobjectsToTransfer.push(sui);\n\t\t\t} else {\n\t\t\t\tconst coins = (await this.#getCoinsByType(coinType)).map((coin) => coin.coinObjectId);\n\n\t\t\t\tif (coins.length > 1) {\n\t\t\t\t\ttxb.mergeCoins(coins[0], coins.slice(1));\n\t\t\t\t}\n\t\t\t\tconst [split] = txb.splitCoins(coins[0], [amount]);\n\t\t\t\tobjectsToTransfer.push(split);\n\t\t\t}\n\t\t}\n\n\t\ttxb.transferObjects(objectsToTransfer, address);\n\n\t\treturn txb;\n\t}\n\n\tasync #estimateClaimGasFee(): Promise<bigint> {\n\t\tconst txb = new TransactionBlock();\n\t\ttxb.setSender(this.#sender);\n\t\ttxb.setGasPayment([]);\n\t\ttxb.transferObjects([txb.gas], this.#keypair.toSuiAddress());\n\n\t\tconst idsToTransfer = [...this.#objects];\n\n\t\tfor (const [coinType] of this.#balances) {\n\t\t\tconst coins = await this.#getCoinsByType(coinType);\n\n\t\t\tif (!coins.length) {\n\t\t\t\tthrow new Error(`Sending account does not contain any coins of type ${coinType}`);\n\t\t\t}\n\n\t\t\tidsToTransfer.push(coins[0].coinObjectId);\n\t\t}\n\n\t\tif (idsToTransfer.length > 0) {\n\t\t\ttxb.transferObjects(\n\t\t\t\tidsToTransfer.map((id) => txb.object(id)),\n\t\t\t\tthis.#keypair.toSuiAddress(),\n\t\t\t);\n\t\t}\n\n\t\tconst result = await this.#client.dryRunTransactionBlock({\n\t\t\ttransactionBlock: await txb.build({ client: this.#client }),\n\t\t});\n\n\t\treturn (\n\t\t\tBigInt(result.effects.gasUsed.computationCost) +\n\t\t\tBigInt(result.effects.gasUsed.storageCost) -\n\t\t\tBigInt(result.effects.gasUsed.storageRebate)\n\t\t);\n\t}\n\n\tasync #getCoinsByType(coinType: string) {\n\t\tif (this.#coinsByType.has(coinType)) {\n\t\t\treturn this.#coinsByType.get(coinType)!;\n\t\t}\n\n\t\tconst coins = await this.#client.getCoins({\n\t\t\tcoinType,\n\t\t\towner: this.#sender,\n\t\t});\n\n\t\tthis.#coinsByType.set(coinType, coins.data);\n\n\t\treturn coins.data;\n\t}\n}\n\nexport interface ZkSendLinkOptions {\n\tkeypair?: Keypair;\n\tclient?: SuiClient;\n}\nexport class ZkSendLink {\n\t#client: SuiClient;\n\t#keypair: Keypair;\n\t#initiallyOwnedObjects = new Set<string>();\n\t#ownedObjects: Array<{\n\t\tobjectId: string;\n\t\tversion: string;\n\t\tdigest: string;\n\t\ttype: string;\n\t}> = [];\n\t#gasCoin?: CoinStruct;\n\t#hasSui = false;\n\t#creatorAddress?: string;\n\n\tconstructor({\n\t\tclient = DEFAULT_ZK_SEND_LINK_OPTIONS.client,\n\t\tkeypair = new Ed25519Keypair(),\n\t}: ZkSendLinkOptions & { linkAddress?: string }) {\n\t\tthis.#client = client;\n\t\tthis.#keypair = keypair;\n\t}\n\n\tstatic async fromUrl(url: string, options?: Omit<ZkSendLinkOptions, 'keypair'>) {\n\t\tconst parsed = new URL(url);\n\t\tconst keypair = Ed25519Keypair.fromSecretKey(fromB64(parsed.hash.slice(1)));\n\n\t\tconst link = new ZkSendLink({\n\t\t\t...options,\n\t\t\tkeypair,\n\t\t});\n\n\t\tawait link.loadOwnedData();\n\n\t\treturn link;\n\t}\n\n\tasync loadOwnedData() {\n\t\tawait Promise.all([this.#loadInitialTransactionData(), this.#loadOwnedObjects()]);\n\t}\n\n\tasync listClaimableAssets(\n\t\taddress: string,\n\t\toptions?: {\n\t\t\tclaimObjectsAddedAfterCreation?: boolean;\n\t\t\tcoinTypes?: string[];\n\t\t\tobjects?: string[];\n\t\t},\n\t) {\n\t\tconst normalizedAddress = normalizeSuiAddress(address);\n\t\tconst txb = this.createClaimTransaction(normalizedAddress, options);\n\n\t\tif (this.#gasCoin || !this.#hasSui) {\n\t\t\ttxb.setGasPayment([]);\n\t\t}\n\n\t\tconst dryRun = await this.#client.dryRunTransactionBlock({\n\t\t\ttransactionBlock: await txb.build({ client: this.#client }),\n\t\t});\n\n\t\tconst balances: {\n\t\t\tcoinType: string;\n\t\t\tamount: bigint;\n\t\t}[] = [];\n\n\t\tconst nfts: {\n\t\t\tobjectId: string;\n\t\t\ttype: string;\n\t\t\tversion: string;\n\t\t\tdigest: string;\n\t\t}[] = [];\n\n\t\tdryRun.balanceChanges.forEach((balanceChange) => {\n\t\t\tif (BigInt(balanceChange.amount) > 0n && isOwner(balanceChange.owner, normalizedAddress)) {\n\t\t\t\tbalances.push({ coinType: balanceChange.coinType, amount: BigInt(balanceChange.amount) });\n\t\t\t}\n\t\t});\n\n\t\tdryRun.objectChanges.forEach((objectChange) => {\n\t\t\tif ('objectType' in objectChange) {\n\t\t\t\tconst type = parseStructTag(objectChange.objectType);\n\n\t\t\t\tif (\n\t\t\t\t\ttype.address === normalizeSuiAddress('0x2') &&\n\t\t\t\t\ttype.module === 'coin' &&\n\t\t\t\t\ttype.name === 'Coin'\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ownedAfterChange(objectChange, normalizedAddress)) {\n\t\t\t\tnfts.push(objectChange);\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tbalances,\n\t\t\tnfts,\n\t\t};\n\t}\n\n\tasync claimAssets(\n\t\taddress: string,\n\t\toptions?: {\n\t\t\tclaimObjectsAddedAfterCreation?: boolean;\n\t\t\tcoinTypes?: string[];\n\t\t\tobjects?: string[];\n\t\t},\n\t) {\n\t\treturn this.#client.signAndExecuteTransactionBlock({\n\t\t\ttransactionBlock: await this.createClaimTransaction(address, options),\n\t\t\tsigner: this.#keypair,\n\t\t});\n\t}\n\n\tcreateClaimTransaction(\n\t\taddress: string,\n\t\toptions?: {\n\t\t\tclaimObjectsAddedAfterCreation?: boolean;\n\t\t\tcoinTypes?: string[];\n\t\t\tobjects?: string[];\n\t\t},\n\t) {\n\t\tconst claimAll = !options?.coinTypes && !options?.objects;\n\t\tconst txb = new TransactionBlock();\n\t\ttxb.setSender(this.#keypair.toSuiAddress());\n\t\tconst coinTypes = new Set(\n\t\t\toptions?.coinTypes?.map((type) => normalizeStructTag(`0x2::coin::Coin<${type}>`)) ?? [],\n\t\t);\n\n\t\tconst objectsToTransfer = this.#ownedObjects\n\t\t\t.filter((object) => {\n\t\t\t\tif (this.#gasCoin) {\n\t\t\t\t\tif (object.objectId === this.#gasCoin.coinObjectId) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else if (object.type === SUI_COIN_OBJECT_TYPE) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (coinTypes?.has(object.type) || options?.objects?.includes(object.objectId)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!options?.claimObjectsAddedAfterCreation &&\n\t\t\t\t\t!this.#initiallyOwnedObjects.has(object.objectId)\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn claimAll;\n\t\t\t})\n\t\t\t.map((object) => txb.object(object.objectId));\n\n\t\tif (this.#gasCoin && this.#creatorAddress) {\n\t\t\ttxb.transferObjects([txb.gas], this.#creatorAddress);\n\t\t} else if (claimAll || coinTypes?.has(SUI_COIN_TYPE)) {\n\t\t\tobjectsToTransfer.push(txb.gas);\n\t\t}\n\n\t\tif (objectsToTransfer.length > 0) {\n\t\t\ttxb.transferObjects(objectsToTransfer, address);\n\t\t}\n\n\t\treturn txb;\n\t}\n\n\tasync #loadOwnedObjects() {\n\t\tthis.#ownedObjects = [];\n\t\tlet nextCursor: string | null | undefined;\n\t\tconst owner = this.#keypair.toSuiAddress();\n\t\tdo {\n\t\t\tconst ownedObjects = await this.#client.getOwnedObjects({\n\t\t\t\tcursor: nextCursor,\n\t\t\t\towner,\n\t\t\t\toptions: {\n\t\t\t\t\tshowType: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// RPC response returns cursor even if there are no more pages\n\t\t\tnextCursor = ownedObjects.hasNextPage ? ownedObjects.nextCursor : null;\n\t\t\tfor (const object of ownedObjects.data) {\n\t\t\t\tif (object.data) {\n\t\t\t\t\tthis.#ownedObjects.push({\n\t\t\t\t\t\tobjectId: normalizeSuiObjectId(object.data.objectId),\n\t\t\t\t\t\tversion: object.data.version,\n\t\t\t\t\t\tdigest: object.data.digest,\n\t\t\t\t\t\ttype: normalizeStructTag(object.data.type!),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} while (nextCursor);\n\n\t\tconst coins = await this.#client.getCoins({\n\t\t\tcoinType: SUI_COIN_TYPE,\n\t\t\towner,\n\t\t});\n\n\t\tthis.#hasSui = coins.data.length > 0;\n\t\tthis.#gasCoin = coins.data.find((coin) => BigInt(coin.balance) % 1000n === 987n);\n\t}\n\n\tasync #loadInitialTransactionData() {\n\t\tconst address = this.#keypair.toSuiAddress();\n\t\tconst result = await this.#client.queryTransactionBlocks({\n\t\t\tlimit: 1,\n\t\t\torder: 'ascending',\n\t\t\tfilter: {\n\t\t\t\tToAddress: address,\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tshowObjectChanges: true,\n\t\t\t\tshowInput: true,\n\t\t\t},\n\t\t});\n\n\t\tresult.data[0]?.objectChanges?.forEach((objectChange) => {\n\t\t\tif (ownedAfterChange(objectChange, address)) {\n\t\t\t\tthis.#initiallyOwnedObjects.add(normalizeSuiObjectId(objectChange.objectId));\n\t\t\t}\n\t\t});\n\n\t\tthis.#creatorAddress = result.data[0]?.transaction?.data.sender;\n\t}\n}\n\nfunction ownedAfterChange(\n\tobjectChange: SuiObjectChange,\n\taddress: string,\n): objectChange is Extract<SuiObjectChange, { type: 'created' | 'transferred' | 'mutated' }> {\n\tif (objectChange.type === 'transferred' && isOwner(objectChange.recipient, address)) {\n\t\treturn true;\n\t}\n\n\tif (\n\t\t(objectChange.type === 'created' || objectChange.type === 'mutated') &&\n\t\tisOwner(objectChange.owner, address)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nfunction isOwner(owner: ObjectOwner, address: string): owner is { AddressOwner: string } {\n\treturn (\n\t\towner &&\n\t\ttypeof owner === 'object' &&\n\t\t'AddressOwner' in owner &&\n\t\tnormalizeSuiAddress(owner.AddressOwner) === address\n\t);\n}\n"],
  "mappings": "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",
  "names": ["_client", "_keypair"]
}
