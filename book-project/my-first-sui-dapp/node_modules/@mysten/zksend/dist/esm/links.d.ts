import { SuiClient } from '@mysten/sui.js/client';
import type { Keypair, Signer } from '@mysten/sui.js/cryptography';
import type { TransactionObjectInput } from '@mysten/sui.js/transactions';
import { TransactionBlock } from '@mysten/sui.js/transactions';
interface ZkSendLinkRedirect {
    url: string;
    name?: string;
}
export interface ZkSendLinkBuilderOptions {
    host?: string;
    path?: string;
    mist?: number;
    keypair?: Keypair;
    client?: SuiClient;
    sender: string;
    redirect?: ZkSendLinkRedirect;
}
export interface ZkSendLinkOptions {
    keypair?: Keypair;
    client?: SuiClient;
}
interface CreateZkSendLinkOptions {
    transactionBlock?: TransactionBlock;
    calculateGas?: (options: {
        balances: Map<string, bigint>;
        objects: TransactionObjectInput[];
        gasEstimateFromDryRun: bigint;
    }) => Promise<bigint> | bigint;
}
export declare class ZkSendLinkBuilder {
    #private;
    constructor({ host, path, keypair, client, sender, redirect, }: ZkSendLinkBuilderOptions);
    addClaimableMist(amount: bigint): void;
    addClaimableBalance(coinType: string, amount: bigint): void;
    addClaimableObject(id: string): void;
    getLink(): string;
    create({ signer, ...options }: CreateZkSendLinkOptions & {
        signer: Signer;
    }): Promise<import("@mysten/sui.js/client").SuiTransactionBlockResponse>;
    createSendTransaction({ transactionBlock: txb, calculateGas, }?: CreateZkSendLinkOptions): Promise<TransactionBlock>;
}
export interface ZkSendLinkOptions {
    keypair?: Keypair;
    client?: SuiClient;
}
export declare class ZkSendLink {
    #private;
    constructor({ client, keypair, }: ZkSendLinkOptions & {
        linkAddress?: string;
    });
    static fromUrl(url: string, options?: Omit<ZkSendLinkOptions, 'keypair'>): Promise<ZkSendLink>;
    loadOwnedData(): Promise<void>;
    listClaimableAssets(address: string, options?: {
        claimObjectsAddedAfterCreation?: boolean;
        coinTypes?: string[];
        objects?: string[];
    }): Promise<{
        balances: {
            coinType: string;
            amount: bigint;
        }[];
        nfts: {
            objectId: string;
            type: string;
            version: string;
            digest: string;
        }[];
    }>;
    claimAssets(address: string, options?: {
        claimObjectsAddedAfterCreation?: boolean;
        coinTypes?: string[];
        objects?: string[];
    }): Promise<import("@mysten/sui.js/client").SuiTransactionBlockResponse>;
    createClaimTransaction(address: string, options?: {
        claimObjectsAddedAfterCreation?: boolean;
        coinTypes?: string[];
        objects?: string[];
    }): TransactionBlock;
}
export {};
